// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IWorld } from "./IWorld.sol";

interface IHobbyConfigSystem {
  function createHobby(string memory hobbyName, string memory uri) external;

  function setHobbyConfig(
    bytes32 hobbyId,
    uint8 tagChosenRange,
    uint8 tierNum,
    uint8 extraRewardNum,
    bool hasExtraSteps,
    bytes32 hobbyAttractiveItem,
    bytes32[] memory requiredItems,
    uint32 delayBlocks,
    bool strictRandom
  ) external;

  function setHobbyTier(
    bytes32 hobbyId,
    uint8 tier,
    uint256 baseTime,
    uint256 baseRestTime,
    uint32 hungerConsumptionRate
  ) external;

  function getRewardRateSampleId(bytes32 hobbyId, uint8 level) external pure returns (bytes32);

  function getRewardTierRateSampleId(bytes32 hobbyId) external pure returns (bytes32);

  function getRewardTagRateSampleId(bytes32 hobbyId, uint8 tier) external pure returns (bytes32);

  function getRewardItemRateSampleId(bytes32 hobbyId, uint8 tier, bytes32 tagId) external pure returns (bytes32);

  function setHobbyRewardTierRate(bytes32 hobbyId, uint8 samplingMethod) external;

  function getHobbyRewardTierBySeed(IWorld world, bytes32 hobbyId, uint256 randSeed) external view returns (uint8);

  function setHobbyRewardTags(bytes32 hobbyId, uint8 tier, bytes32[] calldata tagIds, uint8 samplingMethod) external;

  function getHobbyRewardTagBySeed(
    IWorld world,
    bytes32 hobbyId,
    uint8 tier,
    uint256 randSeed
  ) external view returns (bytes32);

  function getHobbyRewardTagsBySeed(
    IWorld world,
    bytes32 hobbyId,
    uint8 tier,
    uint256 randSeed,
    uint32 tagNum
  ) external view returns (bytes32[] memory);

  function setHobbyRewardItems(
    bytes32 hobbyId,
    uint8 tier,
    bytes32 tagId,
    bytes32[] calldata itemIds,
    uint8 samplingMethod
  ) external;

  function getHobbyRewardItemIndexBySeed(
    IWorld world,
    bytes32 hobbyId,
    uint8 tier,
    bytes32 tagId,
    uint256 randSeed
  ) external view returns (uint256);

  function getHobbyRewardItemsBySeed(
    IWorld world,
    bytes32 hobbyId,
    uint8 tier,
    bytes32 tagId,
    uint256 randSeed
  ) external view returns (bytes32[] memory);

  function setHobbyExtraReward(
    bytes32 hobbyId,
    uint8 tier,
    bytes32 tagId,
    uint8 extraIndex,
    bytes32[] calldata itemIds
  ) external;

  function addHobbyExtraReward(bytes32 hobbyId, uint8 tier, bytes32 tagId, uint8 extraIndex, bytes32 itemId) external;

  function setHobbyRewardSteps(bytes32 hobbyId, uint8 tier, bytes32 tagId, uint32[] calldata extraSteps) external;

  function addHobbyRewardSteps(bytes32 hobbyId, uint8 tier, bytes32 tagId, uint32 extraStep) external;
}
