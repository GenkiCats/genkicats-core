// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CatLevelConfig")));
bytes32 constant CatLevelConfigTableId = _tableId;

struct CatLevelConfigData {
  uint32 hungerLimit;
  uint32 funLimit;
  uint32 expLimit;
  uint32 coinBase;
}

library CatLevelConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "hungerLimit";
    _fieldNames[1] = "funLimit";
    _fieldNames[2] = "expLimit";
    _fieldNames[3] = "coinBase";
    return ("CatLevelConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get hungerLimit */
  function getHungerLimit(uint32 catLevel) internal view returns (uint32 hungerLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get hungerLimit (using the specified store) */
  function getHungerLimit(IStore _store, uint32 catLevel) internal view returns (uint32 hungerLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set hungerLimit */
  function setHungerLimit(uint32 catLevel, uint32 hungerLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((hungerLimit)));
  }

  /** Set hungerLimit (using the specified store) */
  function setHungerLimit(IStore _store, uint32 catLevel, uint32 hungerLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((hungerLimit)));
  }

  /** Get funLimit */
  function getFunLimit(uint32 catLevel) internal view returns (uint32 funLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get funLimit (using the specified store) */
  function getFunLimit(IStore _store, uint32 catLevel) internal view returns (uint32 funLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set funLimit */
  function setFunLimit(uint32 catLevel, uint32 funLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((funLimit)));
  }

  /** Set funLimit (using the specified store) */
  function setFunLimit(IStore _store, uint32 catLevel, uint32 funLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((funLimit)));
  }

  /** Get expLimit */
  function getExpLimit(uint32 catLevel) internal view returns (uint32 expLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get expLimit (using the specified store) */
  function getExpLimit(IStore _store, uint32 catLevel) internal view returns (uint32 expLimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set expLimit */
  function setExpLimit(uint32 catLevel, uint32 expLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((expLimit)));
  }

  /** Set expLimit (using the specified store) */
  function setExpLimit(IStore _store, uint32 catLevel, uint32 expLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((expLimit)));
  }

  /** Get coinBase */
  function getCoinBase(uint32 catLevel) internal view returns (uint32 coinBase) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get coinBase (using the specified store) */
  function getCoinBase(IStore _store, uint32 catLevel) internal view returns (uint32 coinBase) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set coinBase */
  function setCoinBase(uint32 catLevel, uint32 coinBase) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((coinBase)));
  }

  /** Set coinBase (using the specified store) */
  function setCoinBase(IStore _store, uint32 catLevel, uint32 coinBase) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((coinBase)));
  }

  /** Get the full data */
  function get(uint32 catLevel) internal view returns (CatLevelConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 catLevel) internal view returns (CatLevelConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint32 catLevel, uint32 hungerLimit, uint32 funLimit, uint32 expLimit, uint32 coinBase) internal {
    bytes memory _data = encode(hungerLimit, funLimit, expLimit, coinBase);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 catLevel,
    uint32 hungerLimit,
    uint32 funLimit,
    uint32 expLimit,
    uint32 coinBase
  ) internal {
    bytes memory _data = encode(hungerLimit, funLimit, expLimit, coinBase);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint32 catLevel, CatLevelConfigData memory _table) internal {
    set(catLevel, _table.hungerLimit, _table.funLimit, _table.expLimit, _table.coinBase);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 catLevel, CatLevelConfigData memory _table) internal {
    set(_store, catLevel, _table.hungerLimit, _table.funLimit, _table.expLimit, _table.coinBase);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CatLevelConfigData memory _table) {
    _table.hungerLimit = (uint32(Bytes.slice4(_blob, 0)));

    _table.funLimit = (uint32(Bytes.slice4(_blob, 4)));

    _table.expLimit = (uint32(Bytes.slice4(_blob, 8)));

    _table.coinBase = (uint32(Bytes.slice4(_blob, 12)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 hungerLimit,
    uint32 funLimit,
    uint32 expLimit,
    uint32 coinBase
  ) internal view returns (bytes memory) {
    return abi.encodePacked(hungerLimit, funLimit, expLimit, coinBase);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint32 catLevel) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 catLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 catLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(catLevel));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
