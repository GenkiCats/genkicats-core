// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("HobbyConfig")));
bytes32 constant HobbyConfigTableId = _tableId;

struct HobbyConfigData {
  address creator;
  uint8 tagChosenRange;
  uint8 tierNum;
  uint8 extraRewardNum;
  bool hasExtraSteps;
  bytes32 hobbyAttractiveItem;
  bytes32[] requiredItems;
}

library HobbyConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](7);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT8;
    _schema[4] = SchemaType.BOOL;
    _schema[5] = SchemaType.BYTES32;
    _schema[6] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](7);
    _fieldNames[0] = "creator";
    _fieldNames[1] = "tagChosenRange";
    _fieldNames[2] = "tierNum";
    _fieldNames[3] = "extraRewardNum";
    _fieldNames[4] = "hasExtraSteps";
    _fieldNames[5] = "hobbyAttractiveItem";
    _fieldNames[6] = "requiredItems";
    return ("HobbyConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get creator */
  function getCreator(bytes32 hobbyId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 hobbyId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 hobbyId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 hobbyId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)));
  }

  /** Get tagChosenRange */
  function getTagChosenRange(bytes32 hobbyId) internal view returns (uint8 tagChosenRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get tagChosenRange (using the specified store) */
  function getTagChosenRange(IStore _store, bytes32 hobbyId) internal view returns (uint8 tagChosenRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set tagChosenRange */
  function setTagChosenRange(bytes32 hobbyId, uint8 tagChosenRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((tagChosenRange)));
  }

  /** Set tagChosenRange (using the specified store) */
  function setTagChosenRange(IStore _store, bytes32 hobbyId, uint8 tagChosenRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((tagChosenRange)));
  }

  /** Get tierNum */
  function getTierNum(bytes32 hobbyId) internal view returns (uint8 tierNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get tierNum (using the specified store) */
  function getTierNum(IStore _store, bytes32 hobbyId) internal view returns (uint8 tierNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set tierNum */
  function setTierNum(bytes32 hobbyId, uint8 tierNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((tierNum)));
  }

  /** Set tierNum (using the specified store) */
  function setTierNum(IStore _store, bytes32 hobbyId, uint8 tierNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((tierNum)));
  }

  /** Get extraRewardNum */
  function getExtraRewardNum(bytes32 hobbyId) internal view returns (uint8 extraRewardNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get extraRewardNum (using the specified store) */
  function getExtraRewardNum(IStore _store, bytes32 hobbyId) internal view returns (uint8 extraRewardNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set extraRewardNum */
  function setExtraRewardNum(bytes32 hobbyId, uint8 extraRewardNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((extraRewardNum)));
  }

  /** Set extraRewardNum (using the specified store) */
  function setExtraRewardNum(IStore _store, bytes32 hobbyId, uint8 extraRewardNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((extraRewardNum)));
  }

  /** Get hasExtraSteps */
  function getHasExtraSteps(bytes32 hobbyId) internal view returns (bool hasExtraSteps) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get hasExtraSteps (using the specified store) */
  function getHasExtraSteps(IStore _store, bytes32 hobbyId) internal view returns (bool hasExtraSteps) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set hasExtraSteps */
  function setHasExtraSteps(bytes32 hobbyId, bool hasExtraSteps) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((hasExtraSteps)));
  }

  /** Set hasExtraSteps (using the specified store) */
  function setHasExtraSteps(IStore _store, bytes32 hobbyId, bool hasExtraSteps) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((hasExtraSteps)));
  }

  /** Get hobbyAttractiveItem */
  function getHobbyAttractiveItem(bytes32 hobbyId) internal view returns (bytes32 hobbyAttractiveItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get hobbyAttractiveItem (using the specified store) */
  function getHobbyAttractiveItem(IStore _store, bytes32 hobbyId) internal view returns (bytes32 hobbyAttractiveItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set hobbyAttractiveItem */
  function setHobbyAttractiveItem(bytes32 hobbyId, bytes32 hobbyAttractiveItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((hobbyAttractiveItem)));
  }

  /** Set hobbyAttractiveItem (using the specified store) */
  function setHobbyAttractiveItem(IStore _store, bytes32 hobbyId, bytes32 hobbyAttractiveItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((hobbyAttractiveItem)));
  }

  /** Get requiredItems */
  function getRequiredItems(bytes32 hobbyId) internal view returns (bytes32[] memory requiredItems) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get requiredItems (using the specified store) */
  function getRequiredItems(IStore _store, bytes32 hobbyId) internal view returns (bytes32[] memory requiredItems) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set requiredItems */
  function setRequiredItems(bytes32 hobbyId, bytes32[] memory requiredItems) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setField(_tableId, _keyTuple, 6, EncodeArray.encode((requiredItems)));
  }

  /** Set requiredItems (using the specified store) */
  function setRequiredItems(IStore _store, bytes32 hobbyId, bytes32[] memory requiredItems) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setField(_tableId, _keyTuple, 6, EncodeArray.encode((requiredItems)));
  }

  /** Get the length of requiredItems */
  function lengthRequiredItems(bytes32 hobbyId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of requiredItems (using the specified store) */
  function lengthRequiredItems(IStore _store, bytes32 hobbyId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of requiredItems (unchecked, returns invalid data if index overflows) */
  function getItemRequiredItems(bytes32 hobbyId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get an item of requiredItems (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemRequiredItems(IStore _store, bytes32 hobbyId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Push an element to requiredItems */
  function pushRequiredItems(bytes32 hobbyId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)));
  }

  /** Push an element to requiredItems (using the specified store) */
  function pushRequiredItems(IStore _store, bytes32 hobbyId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)));
  }

  /** Pop an element from requiredItems */
  function popRequiredItems(bytes32 hobbyId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 6, 32);
  }

  /** Pop an element from requiredItems (using the specified store) */
  function popRequiredItems(IStore _store, bytes32 hobbyId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.popFromField(_tableId, _keyTuple, 6, 32);
  }

  /** Update an element of requiredItems at `_index` */
  function updateRequiredItems(bytes32 hobbyId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of requiredItems (using the specified store) at `_index` */
  function updateRequiredItems(IStore _store, bytes32 hobbyId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 hobbyId) internal view returns (HobbyConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 hobbyId) internal view returns (HobbyConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 hobbyId,
    address creator,
    uint8 tagChosenRange,
    uint8 tierNum,
    uint8 extraRewardNum,
    bool hasExtraSteps,
    bytes32 hobbyAttractiveItem,
    bytes32[] memory requiredItems
  ) internal {
    bytes memory _data = encode(
      creator,
      tagChosenRange,
      tierNum,
      extraRewardNum,
      hasExtraSteps,
      hobbyAttractiveItem,
      requiredItems
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 hobbyId,
    address creator,
    uint8 tagChosenRange,
    uint8 tierNum,
    uint8 extraRewardNum,
    bool hasExtraSteps,
    bytes32 hobbyAttractiveItem,
    bytes32[] memory requiredItems
  ) internal {
    bytes memory _data = encode(
      creator,
      tagChosenRange,
      tierNum,
      extraRewardNum,
      hasExtraSteps,
      hobbyAttractiveItem,
      requiredItems
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 hobbyId, HobbyConfigData memory _table) internal {
    set(
      hobbyId,
      _table.creator,
      _table.tagChosenRange,
      _table.tierNum,
      _table.extraRewardNum,
      _table.hasExtraSteps,
      _table.hobbyAttractiveItem,
      _table.requiredItems
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 hobbyId, HobbyConfigData memory _table) internal {
    set(
      _store,
      hobbyId,
      _table.creator,
      _table.tagChosenRange,
      _table.tierNum,
      _table.extraRewardNum,
      _table.hasExtraSteps,
      _table.hobbyAttractiveItem,
      _table.requiredItems
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (HobbyConfigData memory _table) {
    // 56 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 56));

    _table.creator = (address(Bytes.slice20(_blob, 0)));

    _table.tagChosenRange = (uint8(Bytes.slice1(_blob, 20)));

    _table.tierNum = (uint8(Bytes.slice1(_blob, 21)));

    _table.extraRewardNum = (uint8(Bytes.slice1(_blob, 22)));

    _table.hasExtraSteps = (_toBool(uint8(Bytes.slice1(_blob, 23))));

    _table.hobbyAttractiveItem = (Bytes.slice32(_blob, 24));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 56) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 88;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.requiredItems = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address creator,
    uint8 tagChosenRange,
    uint8 tierNum,
    uint8 extraRewardNum,
    bool hasExtraSteps,
    bytes32 hobbyAttractiveItem,
    bytes32[] memory requiredItems
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(requiredItems.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        creator,
        tagChosenRange,
        tierNum,
        extraRewardNum,
        hasExtraSteps,
        hobbyAttractiveItem,
        _encodedLengths.unwrap(),
        EncodeArray.encode((requiredItems))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 hobbyId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 hobbyId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 hobbyId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = hobbyId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
