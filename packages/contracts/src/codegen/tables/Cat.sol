// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Cat")));
bytes32 constant CatTableId = _tableId;

struct CatData {
  bool sex;
  uint32 weight;
  uint256 fatherId;
  uint256 motherId;
  uint256 personality;
  uint256 skin;
  uint256 exp;
  uint32 hunger;
  uint32 fun;
  uint32 health;
  uint8 cleanLevel;
  uint32 adoptionAge;
  uint32 birthDate;
  string name;
}

library Cat {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](14);
    _schema[0] = SchemaType.BOOL;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT256;
    _schema[6] = SchemaType.UINT256;
    _schema[7] = SchemaType.UINT32;
    _schema[8] = SchemaType.UINT32;
    _schema[9] = SchemaType.UINT32;
    _schema[10] = SchemaType.UINT8;
    _schema[11] = SchemaType.UINT32;
    _schema[12] = SchemaType.UINT32;
    _schema[13] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](14);
    _fieldNames[0] = "sex";
    _fieldNames[1] = "weight";
    _fieldNames[2] = "fatherId";
    _fieldNames[3] = "motherId";
    _fieldNames[4] = "personality";
    _fieldNames[5] = "skin";
    _fieldNames[6] = "exp";
    _fieldNames[7] = "hunger";
    _fieldNames[8] = "fun";
    _fieldNames[9] = "health";
    _fieldNames[10] = "cleanLevel";
    _fieldNames[11] = "adoptionAge";
    _fieldNames[12] = "birthDate";
    _fieldNames[13] = "name";
    return ("Cat", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get sex */
  function getSex(uint256 cat_id) internal view returns (bool sex) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get sex (using the specified store) */
  function getSex(IStore _store, uint256 cat_id) internal view returns (bool sex) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set sex */
  function setSex(uint256 cat_id, bool sex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((sex)));
  }

  /** Set sex (using the specified store) */
  function setSex(IStore _store, uint256 cat_id, bool sex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((sex)));
  }

  /** Get weight */
  function getWeight(uint256 cat_id) internal view returns (uint32 weight) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get weight (using the specified store) */
  function getWeight(IStore _store, uint256 cat_id) internal view returns (uint32 weight) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set weight */
  function setWeight(uint256 cat_id, uint32 weight) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((weight)));
  }

  /** Set weight (using the specified store) */
  function setWeight(IStore _store, uint256 cat_id, uint32 weight) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((weight)));
  }

  /** Get fatherId */
  function getFatherId(uint256 cat_id) internal view returns (uint256 fatherId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get fatherId (using the specified store) */
  function getFatherId(IStore _store, uint256 cat_id) internal view returns (uint256 fatherId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set fatherId */
  function setFatherId(uint256 cat_id, uint256 fatherId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((fatherId)));
  }

  /** Set fatherId (using the specified store) */
  function setFatherId(IStore _store, uint256 cat_id, uint256 fatherId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((fatherId)));
  }

  /** Get motherId */
  function getMotherId(uint256 cat_id) internal view returns (uint256 motherId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get motherId (using the specified store) */
  function getMotherId(IStore _store, uint256 cat_id) internal view returns (uint256 motherId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set motherId */
  function setMotherId(uint256 cat_id, uint256 motherId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((motherId)));
  }

  /** Set motherId (using the specified store) */
  function setMotherId(IStore _store, uint256 cat_id, uint256 motherId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((motherId)));
  }

  /** Get personality */
  function getPersonality(uint256 cat_id) internal view returns (uint256 personality) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get personality (using the specified store) */
  function getPersonality(IStore _store, uint256 cat_id) internal view returns (uint256 personality) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set personality */
  function setPersonality(uint256 cat_id, uint256 personality) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((personality)));
  }

  /** Set personality (using the specified store) */
  function setPersonality(IStore _store, uint256 cat_id, uint256 personality) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((personality)));
  }

  /** Get skin */
  function getSkin(uint256 cat_id) internal view returns (uint256 skin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get skin (using the specified store) */
  function getSkin(IStore _store, uint256 cat_id) internal view returns (uint256 skin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set skin */
  function setSkin(uint256 cat_id, uint256 skin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((skin)));
  }

  /** Set skin (using the specified store) */
  function setSkin(IStore _store, uint256 cat_id, uint256 skin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((skin)));
  }

  /** Get exp */
  function getExp(uint256 cat_id) internal view returns (uint256 exp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get exp (using the specified store) */
  function getExp(IStore _store, uint256 cat_id) internal view returns (uint256 exp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set exp */
  function setExp(uint256 cat_id, uint256 exp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((exp)));
  }

  /** Set exp (using the specified store) */
  function setExp(IStore _store, uint256 cat_id, uint256 exp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((exp)));
  }

  /** Get hunger */
  function getHunger(uint256 cat_id) internal view returns (uint32 hunger) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get hunger (using the specified store) */
  function getHunger(IStore _store, uint256 cat_id) internal view returns (uint32 hunger) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set hunger */
  function setHunger(uint256 cat_id, uint32 hunger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((hunger)));
  }

  /** Set hunger (using the specified store) */
  function setHunger(IStore _store, uint256 cat_id, uint32 hunger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((hunger)));
  }

  /** Get fun */
  function getFun(uint256 cat_id) internal view returns (uint32 fun) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get fun (using the specified store) */
  function getFun(IStore _store, uint256 cat_id) internal view returns (uint32 fun) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set fun */
  function setFun(uint256 cat_id, uint32 fun) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked((fun)));
  }

  /** Set fun (using the specified store) */
  function setFun(IStore _store, uint256 cat_id, uint32 fun) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked((fun)));
  }

  /** Get health */
  function getHealth(uint256 cat_id) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get health (using the specified store) */
  function getHealth(IStore _store, uint256 cat_id) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set health */
  function setHealth(uint256 cat_id, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 9, abi.encodePacked((health)));
  }

  /** Set health (using the specified store) */
  function setHealth(IStore _store, uint256 cat_id, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 9, abi.encodePacked((health)));
  }

  /** Get cleanLevel */
  function getCleanLevel(uint256 cat_id) internal view returns (uint8 cleanLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 10);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get cleanLevel (using the specified store) */
  function getCleanLevel(IStore _store, uint256 cat_id) internal view returns (uint8 cleanLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 10);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set cleanLevel */
  function setCleanLevel(uint256 cat_id, uint8 cleanLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 10, abi.encodePacked((cleanLevel)));
  }

  /** Set cleanLevel (using the specified store) */
  function setCleanLevel(IStore _store, uint256 cat_id, uint8 cleanLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 10, abi.encodePacked((cleanLevel)));
  }

  /** Get adoptionAge */
  function getAdoptionAge(uint256 cat_id) internal view returns (uint32 adoptionAge) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 11);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get adoptionAge (using the specified store) */
  function getAdoptionAge(IStore _store, uint256 cat_id) internal view returns (uint32 adoptionAge) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 11);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set adoptionAge */
  function setAdoptionAge(uint256 cat_id, uint32 adoptionAge) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 11, abi.encodePacked((adoptionAge)));
  }

  /** Set adoptionAge (using the specified store) */
  function setAdoptionAge(IStore _store, uint256 cat_id, uint32 adoptionAge) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 11, abi.encodePacked((adoptionAge)));
  }

  /** Get birthDate */
  function getBirthDate(uint256 cat_id) internal view returns (uint32 birthDate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 12);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get birthDate (using the specified store) */
  function getBirthDate(IStore _store, uint256 cat_id) internal view returns (uint32 birthDate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 12);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set birthDate */
  function setBirthDate(uint256 cat_id, uint32 birthDate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 12, abi.encodePacked((birthDate)));
  }

  /** Set birthDate (using the specified store) */
  function setBirthDate(IStore _store, uint256 cat_id, uint32 birthDate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 12, abi.encodePacked((birthDate)));
  }

  /** Get name */
  function getName(uint256 cat_id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 13);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, uint256 cat_id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 13);
    return (string(_blob));
  }

  /** Set name */
  function setName(uint256 cat_id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setField(_tableId, _keyTuple, 13, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, uint256 cat_id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setField(_tableId, _keyTuple, 13, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(uint256 cat_id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 13, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, uint256 cat_id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 13, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(uint256 cat_id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 13, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(IStore _store, uint256 cat_id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 13, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(uint256 cat_id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.pushToField(_tableId, _keyTuple, 13, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, uint256 cat_id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.pushToField(_tableId, _keyTuple, 13, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(uint256 cat_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.popFromField(_tableId, _keyTuple, 13, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, uint256 cat_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.popFromField(_tableId, _keyTuple, 13, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(uint256 cat_id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.updateInField(_tableId, _keyTuple, 13, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, uint256 cat_id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.updateInField(_tableId, _keyTuple, 13, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(uint256 cat_id) internal view returns (CatData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 cat_id) internal view returns (CatData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint256 cat_id,
    bool sex,
    uint32 weight,
    uint256 fatherId,
    uint256 motherId,
    uint256 personality,
    uint256 skin,
    uint256 exp,
    uint32 hunger,
    uint32 fun,
    uint32 health,
    uint8 cleanLevel,
    uint32 adoptionAge,
    uint32 birthDate,
    string memory name
  ) internal {
    bytes memory _data = encode(
      sex,
      weight,
      fatherId,
      motherId,
      personality,
      skin,
      exp,
      hunger,
      fun,
      health,
      cleanLevel,
      adoptionAge,
      birthDate,
      name
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 cat_id,
    bool sex,
    uint32 weight,
    uint256 fatherId,
    uint256 motherId,
    uint256 personality,
    uint256 skin,
    uint256 exp,
    uint32 hunger,
    uint32 fun,
    uint32 health,
    uint8 cleanLevel,
    uint32 adoptionAge,
    uint32 birthDate,
    string memory name
  ) internal {
    bytes memory _data = encode(
      sex,
      weight,
      fatherId,
      motherId,
      personality,
      skin,
      exp,
      hunger,
      fun,
      health,
      cleanLevel,
      adoptionAge,
      birthDate,
      name
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 cat_id, CatData memory _table) internal {
    set(
      cat_id,
      _table.sex,
      _table.weight,
      _table.fatherId,
      _table.motherId,
      _table.personality,
      _table.skin,
      _table.exp,
      _table.hunger,
      _table.fun,
      _table.health,
      _table.cleanLevel,
      _table.adoptionAge,
      _table.birthDate,
      _table.name
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 cat_id, CatData memory _table) internal {
    set(
      _store,
      cat_id,
      _table.sex,
      _table.weight,
      _table.fatherId,
      _table.motherId,
      _table.personality,
      _table.skin,
      _table.exp,
      _table.hunger,
      _table.fun,
      _table.health,
      _table.cleanLevel,
      _table.adoptionAge,
      _table.birthDate,
      _table.name
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (CatData memory _table) {
    // 186 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 186));

    _table.sex = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    _table.weight = (uint32(Bytes.slice4(_blob, 1)));

    _table.fatherId = (uint256(Bytes.slice32(_blob, 5)));

    _table.motherId = (uint256(Bytes.slice32(_blob, 37)));

    _table.personality = (uint256(Bytes.slice32(_blob, 69)));

    _table.skin = (uint256(Bytes.slice32(_blob, 101)));

    _table.exp = (uint256(Bytes.slice32(_blob, 133)));

    _table.hunger = (uint32(Bytes.slice4(_blob, 165)));

    _table.fun = (uint32(Bytes.slice4(_blob, 169)));

    _table.health = (uint32(Bytes.slice4(_blob, 173)));

    _table.cleanLevel = (uint8(Bytes.slice1(_blob, 177)));

    _table.adoptionAge = (uint32(Bytes.slice4(_blob, 178)));

    _table.birthDate = (uint32(Bytes.slice4(_blob, 182)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 186) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 218;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bool sex,
    uint32 weight,
    uint256 fatherId,
    uint256 motherId,
    uint256 personality,
    uint256 skin,
    uint256 exp,
    uint32 hunger,
    uint32 fun,
    uint32 health,
    uint8 cleanLevel,
    uint32 adoptionAge,
    uint32 birthDate,
    string memory name
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(name).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        sex,
        weight,
        fatherId,
        motherId,
        personality,
        skin,
        exp,
        hunger,
        fun,
        health,
        cleanLevel,
        adoptionAge,
        birthDate,
        _encodedLengths.unwrap(),
        bytes((name))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 cat_id) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 cat_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 cat_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cat_id));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
