// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("BuffTypeConfig")));
bytes32 constant BuffTypeConfigTableId = _tableId;

struct BuffTypeConfigData {
  uint256 attribute;
  uint256[] extraAttributes;
}

library BuffTypeConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](2);
    _fieldNames[0] = "attribute";
    _fieldNames[1] = "extraAttributes";
    return ("BuffTypeConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get attribute */
  function getAttribute(uint32 buffType) internal view returns (uint256 attribute) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get attribute (using the specified store) */
  function getAttribute(IStore _store, uint32 buffType) internal view returns (uint256 attribute) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set attribute */
  function setAttribute(uint32 buffType, uint256 attribute) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((attribute)));
  }

  /** Set attribute (using the specified store) */
  function setAttribute(IStore _store, uint32 buffType, uint256 attribute) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((attribute)));
  }

  /** Get extraAttributes */
  function getExtraAttributes(uint32 buffType) internal view returns (uint256[] memory extraAttributes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Get extraAttributes (using the specified store) */
  function getExtraAttributes(IStore _store, uint32 buffType) internal view returns (uint256[] memory extraAttributes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set extraAttributes */
  function setExtraAttributes(uint32 buffType, uint256[] memory extraAttributes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.setField(_tableId, _keyTuple, 1, EncodeArray.encode((extraAttributes)));
  }

  /** Set extraAttributes (using the specified store) */
  function setExtraAttributes(IStore _store, uint32 buffType, uint256[] memory extraAttributes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.setField(_tableId, _keyTuple, 1, EncodeArray.encode((extraAttributes)));
  }

  /** Get the length of extraAttributes */
  function lengthExtraAttributes(uint32 buffType) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of extraAttributes (using the specified store) */
  function lengthExtraAttributes(IStore _store, uint32 buffType) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of extraAttributes (unchecked, returns invalid data if index overflows) */
  function getItemExtraAttributes(uint32 buffType, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get an item of extraAttributes (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemExtraAttributes(IStore _store, uint32 buffType, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Push an element to extraAttributes */
  function pushExtraAttributes(uint32 buffType, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Push an element to extraAttributes (using the specified store) */
  function pushExtraAttributes(IStore _store, uint32 buffType, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Pop an element from extraAttributes */
  function popExtraAttributes(uint32 buffType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 32);
  }

  /** Pop an element from extraAttributes (using the specified store) */
  function popExtraAttributes(IStore _store, uint32 buffType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.popFromField(_tableId, _keyTuple, 1, 32);
  }

  /** Update an element of extraAttributes at `_index` */
  function updateExtraAttributes(uint32 buffType, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of extraAttributes (using the specified store) at `_index` */
  function updateExtraAttributes(IStore _store, uint32 buffType, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.updateInField(_tableId, _keyTuple, 1, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(uint32 buffType) internal view returns (BuffTypeConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 buffType) internal view returns (BuffTypeConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint32 buffType, uint256 attribute, uint256[] memory extraAttributes) internal {
    bytes memory _data = encode(attribute, extraAttributes);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint32 buffType, uint256 attribute, uint256[] memory extraAttributes) internal {
    bytes memory _data = encode(attribute, extraAttributes);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint32 buffType, BuffTypeConfigData memory _table) internal {
    set(buffType, _table.attribute, _table.extraAttributes);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 buffType, BuffTypeConfigData memory _table) internal {
    set(_store, buffType, _table.attribute, _table.extraAttributes);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (BuffTypeConfigData memory _table) {
    // 32 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 32));

    _table.attribute = (uint256(Bytes.slice32(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 32) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 64;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.extraAttributes = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint256 attribute, uint256[] memory extraAttributes) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(extraAttributes.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(attribute, _encodedLengths.unwrap(), EncodeArray.encode((extraAttributes)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint32 buffType) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 buffType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 buffType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(buffType));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
