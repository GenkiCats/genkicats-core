// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("TaskConfig")));
bytes32 constant TaskConfigTableId = _tableId;

struct TaskConfigData {
  uint32 level;
  uint32 dupPeriod;
  uint32 rewardUserExp;
  uint256 rewardCoins;
  uint256 rewardDiamonds;
  uint8 status;
}

library TaskConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "level";
    _fieldNames[1] = "dupPeriod";
    _fieldNames[2] = "rewardUserExp";
    _fieldNames[3] = "rewardCoins";
    _fieldNames[4] = "rewardDiamonds";
    _fieldNames[5] = "status";
    return ("TaskConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get level */
  function getLevel(bytes32 taskId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get level (using the specified store) */
  function getLevel(IStore _store, bytes32 taskId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set level */
  function setLevel(bytes32 taskId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((level)));
  }

  /** Set level (using the specified store) */
  function setLevel(IStore _store, bytes32 taskId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((level)));
  }

  /** Get dupPeriod */
  function getDupPeriod(bytes32 taskId) internal view returns (uint32 dupPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get dupPeriod (using the specified store) */
  function getDupPeriod(IStore _store, bytes32 taskId) internal view returns (uint32 dupPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set dupPeriod */
  function setDupPeriod(bytes32 taskId, uint32 dupPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((dupPeriod)));
  }

  /** Set dupPeriod (using the specified store) */
  function setDupPeriod(IStore _store, bytes32 taskId, uint32 dupPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((dupPeriod)));
  }

  /** Get rewardUserExp */
  function getRewardUserExp(bytes32 taskId) internal view returns (uint32 rewardUserExp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get rewardUserExp (using the specified store) */
  function getRewardUserExp(IStore _store, bytes32 taskId) internal view returns (uint32 rewardUserExp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set rewardUserExp */
  function setRewardUserExp(bytes32 taskId, uint32 rewardUserExp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((rewardUserExp)));
  }

  /** Set rewardUserExp (using the specified store) */
  function setRewardUserExp(IStore _store, bytes32 taskId, uint32 rewardUserExp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((rewardUserExp)));
  }

  /** Get rewardCoins */
  function getRewardCoins(bytes32 taskId) internal view returns (uint256 rewardCoins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get rewardCoins (using the specified store) */
  function getRewardCoins(IStore _store, bytes32 taskId) internal view returns (uint256 rewardCoins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set rewardCoins */
  function setRewardCoins(bytes32 taskId, uint256 rewardCoins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((rewardCoins)));
  }

  /** Set rewardCoins (using the specified store) */
  function setRewardCoins(IStore _store, bytes32 taskId, uint256 rewardCoins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((rewardCoins)));
  }

  /** Get rewardDiamonds */
  function getRewardDiamonds(bytes32 taskId) internal view returns (uint256 rewardDiamonds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get rewardDiamonds (using the specified store) */
  function getRewardDiamonds(IStore _store, bytes32 taskId) internal view returns (uint256 rewardDiamonds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set rewardDiamonds */
  function setRewardDiamonds(bytes32 taskId, uint256 rewardDiamonds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((rewardDiamonds)));
  }

  /** Set rewardDiamonds (using the specified store) */
  function setRewardDiamonds(IStore _store, bytes32 taskId, uint256 rewardDiamonds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((rewardDiamonds)));
  }

  /** Get status */
  function getStatus(bytes32 taskId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get status (using the specified store) */
  function getStatus(IStore _store, bytes32 taskId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set status */
  function setStatus(bytes32 taskId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((status)));
  }

  /** Set status (using the specified store) */
  function setStatus(IStore _store, bytes32 taskId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((status)));
  }

  /** Get the full data */
  function get(bytes32 taskId) internal view returns (TaskConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 taskId) internal view returns (TaskConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 taskId,
    uint32 level,
    uint32 dupPeriod,
    uint32 rewardUserExp,
    uint256 rewardCoins,
    uint256 rewardDiamonds,
    uint8 status
  ) internal {
    bytes memory _data = encode(level, dupPeriod, rewardUserExp, rewardCoins, rewardDiamonds, status);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 taskId,
    uint32 level,
    uint32 dupPeriod,
    uint32 rewardUserExp,
    uint256 rewardCoins,
    uint256 rewardDiamonds,
    uint8 status
  ) internal {
    bytes memory _data = encode(level, dupPeriod, rewardUserExp, rewardCoins, rewardDiamonds, status);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 taskId, TaskConfigData memory _table) internal {
    set(
      taskId,
      _table.level,
      _table.dupPeriod,
      _table.rewardUserExp,
      _table.rewardCoins,
      _table.rewardDiamonds,
      _table.status
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 taskId, TaskConfigData memory _table) internal {
    set(
      _store,
      taskId,
      _table.level,
      _table.dupPeriod,
      _table.rewardUserExp,
      _table.rewardCoins,
      _table.rewardDiamonds,
      _table.status
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (TaskConfigData memory _table) {
    _table.level = (uint32(Bytes.slice4(_blob, 0)));

    _table.dupPeriod = (uint32(Bytes.slice4(_blob, 4)));

    _table.rewardUserExp = (uint32(Bytes.slice4(_blob, 8)));

    _table.rewardCoins = (uint256(Bytes.slice32(_blob, 12)));

    _table.rewardDiamonds = (uint256(Bytes.slice32(_blob, 44)));

    _table.status = (uint8(Bytes.slice1(_blob, 76)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 level,
    uint32 dupPeriod,
    uint32 rewardUserExp,
    uint256 rewardCoins,
    uint256 rewardDiamonds,
    uint8 status
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(level, dupPeriod, rewardUserExp, rewardCoins, rewardDiamonds, status);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 taskId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
