// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CatHobbyStatus")));
bytes32 constant CatHobbyStatusTableId = _tableId;

struct CatHobbyStatusData {
  uint32 dropRate;
  bytes32 currentLogId;
  bytes32 latestLogId;
  uint256 lastEventFinishTime;
  bytes32 lastFeedFoodId;
}

library CatHobbyStatus {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.BYTES32;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "dropRate";
    _fieldNames[1] = "currentLogId";
    _fieldNames[2] = "latestLogId";
    _fieldNames[3] = "lastEventFinishTime";
    _fieldNames[4] = "lastFeedFoodId";
    return ("CatHobbyStatus", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get dropRate */
  function getDropRate(bytes32 catId) internal view returns (uint32 dropRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get dropRate (using the specified store) */
  function getDropRate(IStore _store, bytes32 catId) internal view returns (uint32 dropRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set dropRate */
  function setDropRate(bytes32 catId, uint32 dropRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((dropRate)));
  }

  /** Set dropRate (using the specified store) */
  function setDropRate(IStore _store, bytes32 catId, uint32 dropRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((dropRate)));
  }

  /** Get currentLogId */
  function getCurrentLogId(bytes32 catId) internal view returns (bytes32 currentLogId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get currentLogId (using the specified store) */
  function getCurrentLogId(IStore _store, bytes32 catId) internal view returns (bytes32 currentLogId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set currentLogId */
  function setCurrentLogId(bytes32 catId, bytes32 currentLogId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((currentLogId)));
  }

  /** Set currentLogId (using the specified store) */
  function setCurrentLogId(IStore _store, bytes32 catId, bytes32 currentLogId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((currentLogId)));
  }

  /** Get latestLogId */
  function getLatestLogId(bytes32 catId) internal view returns (bytes32 latestLogId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get latestLogId (using the specified store) */
  function getLatestLogId(IStore _store, bytes32 catId) internal view returns (bytes32 latestLogId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set latestLogId */
  function setLatestLogId(bytes32 catId, bytes32 latestLogId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((latestLogId)));
  }

  /** Set latestLogId (using the specified store) */
  function setLatestLogId(IStore _store, bytes32 catId, bytes32 latestLogId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((latestLogId)));
  }

  /** Get lastEventFinishTime */
  function getLastEventFinishTime(bytes32 catId) internal view returns (uint256 lastEventFinishTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lastEventFinishTime (using the specified store) */
  function getLastEventFinishTime(IStore _store, bytes32 catId) internal view returns (uint256 lastEventFinishTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lastEventFinishTime */
  function setLastEventFinishTime(bytes32 catId, uint256 lastEventFinishTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((lastEventFinishTime)));
  }

  /** Set lastEventFinishTime (using the specified store) */
  function setLastEventFinishTime(IStore _store, bytes32 catId, uint256 lastEventFinishTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((lastEventFinishTime)));
  }

  /** Get lastFeedFoodId */
  function getLastFeedFoodId(bytes32 catId) internal view returns (bytes32 lastFeedFoodId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get lastFeedFoodId (using the specified store) */
  function getLastFeedFoodId(IStore _store, bytes32 catId) internal view returns (bytes32 lastFeedFoodId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set lastFeedFoodId */
  function setLastFeedFoodId(bytes32 catId, bytes32 lastFeedFoodId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((lastFeedFoodId)));
  }

  /** Set lastFeedFoodId (using the specified store) */
  function setLastFeedFoodId(IStore _store, bytes32 catId, bytes32 lastFeedFoodId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((lastFeedFoodId)));
  }

  /** Get the full data */
  function get(bytes32 catId) internal view returns (CatHobbyStatusData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 catId) internal view returns (CatHobbyStatusData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 catId,
    uint32 dropRate,
    bytes32 currentLogId,
    bytes32 latestLogId,
    uint256 lastEventFinishTime,
    bytes32 lastFeedFoodId
  ) internal {
    bytes memory _data = encode(dropRate, currentLogId, latestLogId, lastEventFinishTime, lastFeedFoodId);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 catId,
    uint32 dropRate,
    bytes32 currentLogId,
    bytes32 latestLogId,
    uint256 lastEventFinishTime,
    bytes32 lastFeedFoodId
  ) internal {
    bytes memory _data = encode(dropRate, currentLogId, latestLogId, lastEventFinishTime, lastFeedFoodId);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 catId, CatHobbyStatusData memory _table) internal {
    set(
      catId,
      _table.dropRate,
      _table.currentLogId,
      _table.latestLogId,
      _table.lastEventFinishTime,
      _table.lastFeedFoodId
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 catId, CatHobbyStatusData memory _table) internal {
    set(
      _store,
      catId,
      _table.dropRate,
      _table.currentLogId,
      _table.latestLogId,
      _table.lastEventFinishTime,
      _table.lastFeedFoodId
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CatHobbyStatusData memory _table) {
    _table.dropRate = (uint32(Bytes.slice4(_blob, 0)));

    _table.currentLogId = (Bytes.slice32(_blob, 4));

    _table.latestLogId = (Bytes.slice32(_blob, 36));

    _table.lastEventFinishTime = (uint256(Bytes.slice32(_blob, 68)));

    _table.lastFeedFoodId = (Bytes.slice32(_blob, 100));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 dropRate,
    bytes32 currentLogId,
    bytes32 latestLogId,
    uint256 lastEventFinishTime,
    bytes32 lastFeedFoodId
  ) internal view returns (bytes memory) {
    return abi.encodePacked(dropRate, currentLogId, latestLogId, lastEventFinishTime, lastFeedFoodId);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 catId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 catId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 catId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = catId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
