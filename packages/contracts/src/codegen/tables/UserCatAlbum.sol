// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("UserCatAlbum")));
bytes32 constant UserCatAlbumTableId = _tableId;

struct UserCatAlbumData {
  uint256 photoId;
  uint256 obtainTime;
  uint8 status;
  uint256[] catIds;
}

library UserCatAlbum {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "photoId";
    _fieldNames[1] = "obtainTime";
    _fieldNames[2] = "status";
    _fieldNames[3] = "catIds";
    return ("UserCatAlbum", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get photoId */
  function getPhotoId(bytes32 userId) internal view returns (uint256 photoId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get photoId (using the specified store) */
  function getPhotoId(IStore _store, bytes32 userId) internal view returns (uint256 photoId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set photoId */
  function setPhotoId(bytes32 userId, uint256 photoId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((photoId)));
  }

  /** Set photoId (using the specified store) */
  function setPhotoId(IStore _store, bytes32 userId, uint256 photoId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((photoId)));
  }

  /** Get obtainTime */
  function getObtainTime(bytes32 userId) internal view returns (uint256 obtainTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get obtainTime (using the specified store) */
  function getObtainTime(IStore _store, bytes32 userId) internal view returns (uint256 obtainTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set obtainTime */
  function setObtainTime(bytes32 userId, uint256 obtainTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((obtainTime)));
  }

  /** Set obtainTime (using the specified store) */
  function setObtainTime(IStore _store, bytes32 userId, uint256 obtainTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((obtainTime)));
  }

  /** Get status */
  function getStatus(bytes32 userId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get status (using the specified store) */
  function getStatus(IStore _store, bytes32 userId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set status */
  function setStatus(bytes32 userId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((status)));
  }

  /** Set status (using the specified store) */
  function setStatus(IStore _store, bytes32 userId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((status)));
  }

  /** Get catIds */
  function getCatIds(bytes32 userId) internal view returns (uint256[] memory catIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Get catIds (using the specified store) */
  function getCatIds(IStore _store, bytes32 userId) internal view returns (uint256[] memory catIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set catIds */
  function setCatIds(bytes32 userId, uint256[] memory catIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode((catIds)));
  }

  /** Set catIds (using the specified store) */
  function setCatIds(IStore _store, bytes32 userId, uint256[] memory catIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 3, EncodeArray.encode((catIds)));
  }

  /** Get the length of catIds */
  function lengthCatIds(bytes32 userId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of catIds (using the specified store) */
  function lengthCatIds(IStore _store, bytes32 userId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of catIds (unchecked, returns invalid data if index overflows) */
  function getItemCatIds(bytes32 userId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get an item of catIds (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemCatIds(IStore _store, bytes32 userId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Push an element to catIds */
  function pushCatIds(bytes32 userId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /** Push an element to catIds (using the specified store) */
  function pushCatIds(IStore _store, bytes32 userId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /** Pop an element from catIds */
  function popCatIds(bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 32);
  }

  /** Pop an element from catIds (using the specified store) */
  function popCatIds(IStore _store, bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.popFromField(_tableId, _keyTuple, 3, 32);
  }

  /** Update an element of catIds at `_index` */
  function updateCatIds(bytes32 userId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of catIds (using the specified store) at `_index` */
  function updateCatIds(IStore _store, bytes32 userId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 userId) internal view returns (UserCatAlbumData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 userId) internal view returns (UserCatAlbumData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 userId, uint256 photoId, uint256 obtainTime, uint8 status, uint256[] memory catIds) internal {
    bytes memory _data = encode(photoId, obtainTime, status, catIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 userId,
    uint256 photoId,
    uint256 obtainTime,
    uint8 status,
    uint256[] memory catIds
  ) internal {
    bytes memory _data = encode(photoId, obtainTime, status, catIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 userId, UserCatAlbumData memory _table) internal {
    set(userId, _table.photoId, _table.obtainTime, _table.status, _table.catIds);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 userId, UserCatAlbumData memory _table) internal {
    set(_store, userId, _table.photoId, _table.obtainTime, _table.status, _table.catIds);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (UserCatAlbumData memory _table) {
    // 65 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 65));

    _table.photoId = (uint256(Bytes.slice32(_blob, 0)));

    _table.obtainTime = (uint256(Bytes.slice32(_blob, 32)));

    _table.status = (uint8(Bytes.slice1(_blob, 64)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 65) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 97;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.catIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 photoId,
    uint256 obtainTime,
    uint8 status,
    uint256[] memory catIds
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(catIds.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(photoId, obtainTime, status, _encodedLengths.unwrap(), EncodeArray.encode((catIds)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 userId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
