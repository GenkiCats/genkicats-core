// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("AutoFeeder")));
bytes32 constant AutoFeederTableId = _tableId;

struct AutoFeederData {
  uint32 hunger;
  uint32 level;
  uint256 lastFillFeederTime;
  uint256 lastFeedTime;
  uint256[] lastFeedCats;
}

library AutoFeeder {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "hunger";
    _fieldNames[1] = "level";
    _fieldNames[2] = "lastFillFeederTime";
    _fieldNames[3] = "lastFeedTime";
    _fieldNames[4] = "lastFeedCats";
    return ("AutoFeeder", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get hunger */
  function getHunger(bytes32 userId) internal view returns (uint32 hunger) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get hunger (using the specified store) */
  function getHunger(IStore _store, bytes32 userId) internal view returns (uint32 hunger) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set hunger */
  function setHunger(bytes32 userId, uint32 hunger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((hunger)));
  }

  /** Set hunger (using the specified store) */
  function setHunger(IStore _store, bytes32 userId, uint32 hunger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((hunger)));
  }

  /** Get level */
  function getLevel(bytes32 userId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get level (using the specified store) */
  function getLevel(IStore _store, bytes32 userId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set level */
  function setLevel(bytes32 userId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((level)));
  }

  /** Set level (using the specified store) */
  function setLevel(IStore _store, bytes32 userId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((level)));
  }

  /** Get lastFillFeederTime */
  function getLastFillFeederTime(bytes32 userId) internal view returns (uint256 lastFillFeederTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lastFillFeederTime (using the specified store) */
  function getLastFillFeederTime(IStore _store, bytes32 userId) internal view returns (uint256 lastFillFeederTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lastFillFeederTime */
  function setLastFillFeederTime(bytes32 userId, uint256 lastFillFeederTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((lastFillFeederTime)));
  }

  /** Set lastFillFeederTime (using the specified store) */
  function setLastFillFeederTime(IStore _store, bytes32 userId, uint256 lastFillFeederTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((lastFillFeederTime)));
  }

  /** Get lastFeedTime */
  function getLastFeedTime(bytes32 userId) internal view returns (uint256 lastFeedTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lastFeedTime (using the specified store) */
  function getLastFeedTime(IStore _store, bytes32 userId) internal view returns (uint256 lastFeedTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lastFeedTime */
  function setLastFeedTime(bytes32 userId, uint256 lastFeedTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((lastFeedTime)));
  }

  /** Set lastFeedTime (using the specified store) */
  function setLastFeedTime(IStore _store, bytes32 userId, uint256 lastFeedTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((lastFeedTime)));
  }

  /** Get lastFeedCats */
  function getLastFeedCats(bytes32 userId) internal view returns (uint256[] memory lastFeedCats) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Get lastFeedCats (using the specified store) */
  function getLastFeedCats(IStore _store, bytes32 userId) internal view returns (uint256[] memory lastFeedCats) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set lastFeedCats */
  function setLastFeedCats(bytes32 userId, uint256[] memory lastFeedCats) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, EncodeArray.encode((lastFeedCats)));
  }

  /** Set lastFeedCats (using the specified store) */
  function setLastFeedCats(IStore _store, bytes32 userId, uint256[] memory lastFeedCats) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setField(_tableId, _keyTuple, 4, EncodeArray.encode((lastFeedCats)));
  }

  /** Get the length of lastFeedCats */
  function lengthLastFeedCats(bytes32 userId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of lastFeedCats (using the specified store) */
  function lengthLastFeedCats(IStore _store, bytes32 userId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of lastFeedCats (unchecked, returns invalid data if index overflows) */
  function getItemLastFeedCats(bytes32 userId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get an item of lastFeedCats (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemLastFeedCats(IStore _store, bytes32 userId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Push an element to lastFeedCats */
  function pushLastFeedCats(bytes32 userId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Push an element to lastFeedCats (using the specified store) */
  function pushLastFeedCats(IStore _store, bytes32 userId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Pop an element from lastFeedCats */
  function popLastFeedCats(bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 32);
  }

  /** Pop an element from lastFeedCats (using the specified store) */
  function popLastFeedCats(IStore _store, bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.popFromField(_tableId, _keyTuple, 4, 32);
  }

  /** Update an element of lastFeedCats at `_index` */
  function updateLastFeedCats(bytes32 userId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of lastFeedCats (using the specified store) at `_index` */
  function updateLastFeedCats(IStore _store, bytes32 userId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.updateInField(_tableId, _keyTuple, 4, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 userId) internal view returns (AutoFeederData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 userId) internal view returns (AutoFeederData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 userId,
    uint32 hunger,
    uint32 level,
    uint256 lastFillFeederTime,
    uint256 lastFeedTime,
    uint256[] memory lastFeedCats
  ) internal {
    bytes memory _data = encode(hunger, level, lastFillFeederTime, lastFeedTime, lastFeedCats);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 userId,
    uint32 hunger,
    uint32 level,
    uint256 lastFillFeederTime,
    uint256 lastFeedTime,
    uint256[] memory lastFeedCats
  ) internal {
    bytes memory _data = encode(hunger, level, lastFillFeederTime, lastFeedTime, lastFeedCats);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 userId, AutoFeederData memory _table) internal {
    set(userId, _table.hunger, _table.level, _table.lastFillFeederTime, _table.lastFeedTime, _table.lastFeedCats);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 userId, AutoFeederData memory _table) internal {
    set(
      _store,
      userId,
      _table.hunger,
      _table.level,
      _table.lastFillFeederTime,
      _table.lastFeedTime,
      _table.lastFeedCats
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (AutoFeederData memory _table) {
    // 72 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 72));

    _table.hunger = (uint32(Bytes.slice4(_blob, 0)));

    _table.level = (uint32(Bytes.slice4(_blob, 4)));

    _table.lastFillFeederTime = (uint256(Bytes.slice32(_blob, 8)));

    _table.lastFeedTime = (uint256(Bytes.slice32(_blob, 40)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 72) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 104;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.lastFeedCats = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 hunger,
    uint32 level,
    uint256 lastFillFeederTime,
    uint256 lastFeedTime,
    uint256[] memory lastFeedCats
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(lastFeedCats.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        hunger,
        level,
        lastFillFeederTime,
        lastFeedTime,
        _encodedLengths.unwrap(),
        EncodeArray.encode((lastFeedCats))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 userId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 userId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = userId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
