// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CatConfig")));
bytes32 constant CatConfigTableId = _tableId;

struct CatConfigData {
  uint32 hungerConsumeRate;
  uint32 funConsumeRate;
  uint32 baseDropRate;
  uint32 baseHungerCoinRate;
  uint256 starvingStartTime;
  uint32 foreverFriendshipLevel;
  uint32 funLimit;
  uint32 cleanLimit;
}

library CatConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT32;
    _schema[6] = SchemaType.UINT32;
    _schema[7] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "hungerConsumeRate";
    _fieldNames[1] = "funConsumeRate";
    _fieldNames[2] = "baseDropRate";
    _fieldNames[3] = "baseHungerCoinRate";
    _fieldNames[4] = "starvingStartTime";
    _fieldNames[5] = "foreverFriendshipLevel";
    _fieldNames[6] = "funLimit";
    _fieldNames[7] = "cleanLimit";
    return ("CatConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get hungerConsumeRate */
  function getHungerConsumeRate() internal view returns (uint32 hungerConsumeRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get hungerConsumeRate (using the specified store) */
  function getHungerConsumeRate(IStore _store) internal view returns (uint32 hungerConsumeRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set hungerConsumeRate */
  function setHungerConsumeRate(uint32 hungerConsumeRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((hungerConsumeRate)));
  }

  /** Set hungerConsumeRate (using the specified store) */
  function setHungerConsumeRate(IStore _store, uint32 hungerConsumeRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((hungerConsumeRate)));
  }

  /** Get funConsumeRate */
  function getFunConsumeRate() internal view returns (uint32 funConsumeRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get funConsumeRate (using the specified store) */
  function getFunConsumeRate(IStore _store) internal view returns (uint32 funConsumeRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set funConsumeRate */
  function setFunConsumeRate(uint32 funConsumeRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((funConsumeRate)));
  }

  /** Set funConsumeRate (using the specified store) */
  function setFunConsumeRate(IStore _store, uint32 funConsumeRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((funConsumeRate)));
  }

  /** Get baseDropRate */
  function getBaseDropRate() internal view returns (uint32 baseDropRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get baseDropRate (using the specified store) */
  function getBaseDropRate(IStore _store) internal view returns (uint32 baseDropRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set baseDropRate */
  function setBaseDropRate(uint32 baseDropRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((baseDropRate)));
  }

  /** Set baseDropRate (using the specified store) */
  function setBaseDropRate(IStore _store, uint32 baseDropRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((baseDropRate)));
  }

  /** Get baseHungerCoinRate */
  function getBaseHungerCoinRate() internal view returns (uint32 baseHungerCoinRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get baseHungerCoinRate (using the specified store) */
  function getBaseHungerCoinRate(IStore _store) internal view returns (uint32 baseHungerCoinRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set baseHungerCoinRate */
  function setBaseHungerCoinRate(uint32 baseHungerCoinRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((baseHungerCoinRate)));
  }

  /** Set baseHungerCoinRate (using the specified store) */
  function setBaseHungerCoinRate(IStore _store, uint32 baseHungerCoinRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((baseHungerCoinRate)));
  }

  /** Get starvingStartTime */
  function getStarvingStartTime() internal view returns (uint256 starvingStartTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get starvingStartTime (using the specified store) */
  function getStarvingStartTime(IStore _store) internal view returns (uint256 starvingStartTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set starvingStartTime */
  function setStarvingStartTime(uint256 starvingStartTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((starvingStartTime)));
  }

  /** Set starvingStartTime (using the specified store) */
  function setStarvingStartTime(IStore _store, uint256 starvingStartTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((starvingStartTime)));
  }

  /** Get foreverFriendshipLevel */
  function getForeverFriendshipLevel() internal view returns (uint32 foreverFriendshipLevel) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get foreverFriendshipLevel (using the specified store) */
  function getForeverFriendshipLevel(IStore _store) internal view returns (uint32 foreverFriendshipLevel) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set foreverFriendshipLevel */
  function setForeverFriendshipLevel(uint32 foreverFriendshipLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((foreverFriendshipLevel)));
  }

  /** Set foreverFriendshipLevel (using the specified store) */
  function setForeverFriendshipLevel(IStore _store, uint32 foreverFriendshipLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((foreverFriendshipLevel)));
  }

  /** Get funLimit */
  function getFunLimit() internal view returns (uint32 funLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get funLimit (using the specified store) */
  function getFunLimit(IStore _store) internal view returns (uint32 funLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set funLimit */
  function setFunLimit(uint32 funLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((funLimit)));
  }

  /** Set funLimit (using the specified store) */
  function setFunLimit(IStore _store, uint32 funLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((funLimit)));
  }

  /** Get cleanLimit */
  function getCleanLimit() internal view returns (uint32 cleanLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get cleanLimit (using the specified store) */
  function getCleanLimit(IStore _store) internal view returns (uint32 cleanLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set cleanLimit */
  function setCleanLimit(uint32 cleanLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((cleanLimit)));
  }

  /** Set cleanLimit (using the specified store) */
  function setCleanLimit(IStore _store, uint32 cleanLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((cleanLimit)));
  }

  /** Get the full data */
  function get() internal view returns (CatConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (CatConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint32 hungerConsumeRate,
    uint32 funConsumeRate,
    uint32 baseDropRate,
    uint32 baseHungerCoinRate,
    uint256 starvingStartTime,
    uint32 foreverFriendshipLevel,
    uint32 funLimit,
    uint32 cleanLimit
  ) internal {
    bytes memory _data = encode(
      hungerConsumeRate,
      funConsumeRate,
      baseDropRate,
      baseHungerCoinRate,
      starvingStartTime,
      foreverFriendshipLevel,
      funLimit,
      cleanLimit
    );

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 hungerConsumeRate,
    uint32 funConsumeRate,
    uint32 baseDropRate,
    uint32 baseHungerCoinRate,
    uint256 starvingStartTime,
    uint32 foreverFriendshipLevel,
    uint32 funLimit,
    uint32 cleanLimit
  ) internal {
    bytes memory _data = encode(
      hungerConsumeRate,
      funConsumeRate,
      baseDropRate,
      baseHungerCoinRate,
      starvingStartTime,
      foreverFriendshipLevel,
      funLimit,
      cleanLimit
    );

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(CatConfigData memory _table) internal {
    set(
      _table.hungerConsumeRate,
      _table.funConsumeRate,
      _table.baseDropRate,
      _table.baseHungerCoinRate,
      _table.starvingStartTime,
      _table.foreverFriendshipLevel,
      _table.funLimit,
      _table.cleanLimit
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, CatConfigData memory _table) internal {
    set(
      _store,
      _table.hungerConsumeRate,
      _table.funConsumeRate,
      _table.baseDropRate,
      _table.baseHungerCoinRate,
      _table.starvingStartTime,
      _table.foreverFriendshipLevel,
      _table.funLimit,
      _table.cleanLimit
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CatConfigData memory _table) {
    _table.hungerConsumeRate = (uint32(Bytes.slice4(_blob, 0)));

    _table.funConsumeRate = (uint32(Bytes.slice4(_blob, 4)));

    _table.baseDropRate = (uint32(Bytes.slice4(_blob, 8)));

    _table.baseHungerCoinRate = (uint32(Bytes.slice4(_blob, 12)));

    _table.starvingStartTime = (uint256(Bytes.slice32(_blob, 16)));

    _table.foreverFriendshipLevel = (uint32(Bytes.slice4(_blob, 48)));

    _table.funLimit = (uint32(Bytes.slice4(_blob, 52)));

    _table.cleanLimit = (uint32(Bytes.slice4(_blob, 56)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 hungerConsumeRate,
    uint32 funConsumeRate,
    uint32 baseDropRate,
    uint32 baseHungerCoinRate,
    uint256 starvingStartTime,
    uint32 foreverFriendshipLevel,
    uint32 funLimit,
    uint32 cleanLimit
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        hungerConsumeRate,
        funConsumeRate,
        baseDropRate,
        baseHungerCoinRate,
        starvingStartTime,
        foreverFriendshipLevel,
        funLimit,
        cleanLimit
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
