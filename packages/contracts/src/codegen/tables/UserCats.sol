// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("UserCats")));
bytes32 constant UserCatsTableId = _tableId;

struct UserCatsData {
  uint32 friendshipExp;
  uint32 friendshipLevel;
  uint256 obtainTime;
  uint256 lostTime;
  uint8 obtainMethod;
  uint8 status;
}

library UserCats {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT8;
    _schema[5] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "friendshipExp";
    _fieldNames[1] = "friendshipLevel";
    _fieldNames[2] = "obtainTime";
    _fieldNames[3] = "lostTime";
    _fieldNames[4] = "obtainMethod";
    _fieldNames[5] = "status";
    return ("UserCats", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get friendshipExp */
  function getFriendshipExp(bytes32 userId, bytes32 catId) internal view returns (uint32 friendshipExp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get friendshipExp (using the specified store) */
  function getFriendshipExp(IStore _store, bytes32 userId, bytes32 catId) internal view returns (uint32 friendshipExp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set friendshipExp */
  function setFriendshipExp(bytes32 userId, bytes32 catId, uint32 friendshipExp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((friendshipExp)));
  }

  /** Set friendshipExp (using the specified store) */
  function setFriendshipExp(IStore _store, bytes32 userId, bytes32 catId, uint32 friendshipExp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((friendshipExp)));
  }

  /** Get friendshipLevel */
  function getFriendshipLevel(bytes32 userId, bytes32 catId) internal view returns (uint32 friendshipLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get friendshipLevel (using the specified store) */
  function getFriendshipLevel(
    IStore _store,
    bytes32 userId,
    bytes32 catId
  ) internal view returns (uint32 friendshipLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set friendshipLevel */
  function setFriendshipLevel(bytes32 userId, bytes32 catId, uint32 friendshipLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((friendshipLevel)));
  }

  /** Set friendshipLevel (using the specified store) */
  function setFriendshipLevel(IStore _store, bytes32 userId, bytes32 catId, uint32 friendshipLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((friendshipLevel)));
  }

  /** Get obtainTime */
  function getObtainTime(bytes32 userId, bytes32 catId) internal view returns (uint256 obtainTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get obtainTime (using the specified store) */
  function getObtainTime(IStore _store, bytes32 userId, bytes32 catId) internal view returns (uint256 obtainTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set obtainTime */
  function setObtainTime(bytes32 userId, bytes32 catId, uint256 obtainTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((obtainTime)));
  }

  /** Set obtainTime (using the specified store) */
  function setObtainTime(IStore _store, bytes32 userId, bytes32 catId, uint256 obtainTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((obtainTime)));
  }

  /** Get lostTime */
  function getLostTime(bytes32 userId, bytes32 catId) internal view returns (uint256 lostTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lostTime (using the specified store) */
  function getLostTime(IStore _store, bytes32 userId, bytes32 catId) internal view returns (uint256 lostTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lostTime */
  function setLostTime(bytes32 userId, bytes32 catId, uint256 lostTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((lostTime)));
  }

  /** Set lostTime (using the specified store) */
  function setLostTime(IStore _store, bytes32 userId, bytes32 catId, uint256 lostTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((lostTime)));
  }

  /** Get obtainMethod */
  function getObtainMethod(bytes32 userId, bytes32 catId) internal view returns (uint8 obtainMethod) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get obtainMethod (using the specified store) */
  function getObtainMethod(IStore _store, bytes32 userId, bytes32 catId) internal view returns (uint8 obtainMethod) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set obtainMethod */
  function setObtainMethod(bytes32 userId, bytes32 catId, uint8 obtainMethod) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((obtainMethod)));
  }

  /** Set obtainMethod (using the specified store) */
  function setObtainMethod(IStore _store, bytes32 userId, bytes32 catId, uint8 obtainMethod) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((obtainMethod)));
  }

  /** Get status */
  function getStatus(bytes32 userId, bytes32 catId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get status (using the specified store) */
  function getStatus(IStore _store, bytes32 userId, bytes32 catId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set status */
  function setStatus(bytes32 userId, bytes32 catId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((status)));
  }

  /** Set status (using the specified store) */
  function setStatus(IStore _store, bytes32 userId, bytes32 catId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((status)));
  }

  /** Get the full data */
  function get(bytes32 userId, bytes32 catId) internal view returns (UserCatsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 userId, bytes32 catId) internal view returns (UserCatsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 userId,
    bytes32 catId,
    uint32 friendshipExp,
    uint32 friendshipLevel,
    uint256 obtainTime,
    uint256 lostTime,
    uint8 obtainMethod,
    uint8 status
  ) internal {
    bytes memory _data = encode(friendshipExp, friendshipLevel, obtainTime, lostTime, obtainMethod, status);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 userId,
    bytes32 catId,
    uint32 friendshipExp,
    uint32 friendshipLevel,
    uint256 obtainTime,
    uint256 lostTime,
    uint8 obtainMethod,
    uint8 status
  ) internal {
    bytes memory _data = encode(friendshipExp, friendshipLevel, obtainTime, lostTime, obtainMethod, status);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 userId, bytes32 catId, UserCatsData memory _table) internal {
    set(
      userId,
      catId,
      _table.friendshipExp,
      _table.friendshipLevel,
      _table.obtainTime,
      _table.lostTime,
      _table.obtainMethod,
      _table.status
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 userId, bytes32 catId, UserCatsData memory _table) internal {
    set(
      _store,
      userId,
      catId,
      _table.friendshipExp,
      _table.friendshipLevel,
      _table.obtainTime,
      _table.lostTime,
      _table.obtainMethod,
      _table.status
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (UserCatsData memory _table) {
    _table.friendshipExp = (uint32(Bytes.slice4(_blob, 0)));

    _table.friendshipLevel = (uint32(Bytes.slice4(_blob, 4)));

    _table.obtainTime = (uint256(Bytes.slice32(_blob, 8)));

    _table.lostTime = (uint256(Bytes.slice32(_blob, 40)));

    _table.obtainMethod = (uint8(Bytes.slice1(_blob, 72)));

    _table.status = (uint8(Bytes.slice1(_blob, 73)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 friendshipExp,
    uint32 friendshipLevel,
    uint256 obtainTime,
    uint256 lostTime,
    uint8 obtainMethod,
    uint8 status
  ) internal view returns (bytes memory) {
    return abi.encodePacked(friendshipExp, friendshipLevel, obtainTime, lostTime, obtainMethod, status);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 userId, bytes32 catId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 userId, bytes32 catId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 userId, bytes32 catId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = userId;
    _keyTuple[1] = catId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
