/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/common";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Address2User: (() => {
      const tableId = new TableId("", "Address2User");
      return defineComponent(
        world,
        {
          userId: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    UserMainAddress: (() => {
      const tableId = new TableId("", "UserMainAddress");
      return defineComponent(
        world,
        {
          userAddress: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    ItemList: (() => {
      const tableId = new TableId("", "ItemList");
      return defineComponent(
        world,
        {
          itemId: RecsType.BigInt,
          itemNum: RecsType.BigInt,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Tradable: (() => {
      const tableId = new TableId("", "Tradable");
      return defineComponent(
        world,
        {
          tradable: RecsType.Boolean,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Cat: (() => {
      const tableId = new TableId("", "Cat");
      return defineComponent(
        world,
        {
          sex: RecsType.Boolean,
          weight: RecsType.Number,
          fatherId: RecsType.BigInt,
          motherId: RecsType.BigInt,
          personality: RecsType.BigInt,
          skin: RecsType.BigInt,
          exp: RecsType.BigInt,
          hunger: RecsType.Number,
          fun: RecsType.Number,
          health: RecsType.Number,
          cleanLevel: RecsType.Number,
          adoptionAge: RecsType.Number,
          birthDate: RecsType.Number,
          name: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    CatBuff: (() => {
      const tableId = new TableId("", "CatBuff");
      return defineComponent(
        world,
        {
          buffId: RecsType.BigInt,
          startTime: RecsType.Number,
          duration: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    CatUserRelation: (() => {
      const tableId = new TableId("", "CatUserRelation");
      return defineComponent(
        world,
        {
          catId: RecsType.BigInt,
          friendship: RecsType.Number,
          obtainTime: RecsType.Number,
          lostTime: RecsType.Number,
          obtainMethod: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    UserRoomExpansion: (() => {
      const tableId = new TableId("", "UserRoomExpansio");
      return defineComponent(
        world,
        {
          inDoorExpandLevel: RecsType.Number,
          outDoorExpandLevel: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AutoFeeder: (() => {
      const tableId = new TableId("", "AutoFeeder");
      return defineComponent(
        world,
        {
          hunger: RecsType.Number,
          level: RecsType.Number,
          lastFillFeederTime: RecsType.Number,
          lastFeedTime: RecsType.Number,
          lastFeedCats: RecsType.BigIntArray,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    UserStatus: (() => {
      const tableId = new TableId("", "UserStatus");
      return defineComponent(
        world,
        {
          coinBalance: RecsType.BigInt,
          diamondBalance: RecsType.BigInt,
          exp: RecsType.Number,
          timeZoneSign: RecsType.Boolean,
          timeZoneOffset: RecsType.Number,
          nickName: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    UserCatAlbum: (() => {
      const tableId = new TableId("", "UserCatAlbum");
      return defineComponent(
        world,
        {
          photoId: RecsType.BigInt,
          obtainTime: RecsType.Number,
          status: RecsType.Number,
          catIds: RecsType.BigIntArray,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Travel: (() => {
      const tableId = new TableId("", "Travel");
      return defineComponent(
        world,
        {
          travelId: RecsType.BigInt,
          spotId: RecsType.BigInt,
          travelStatus: RecsType.Number,
          travelType: RecsType.Number,
          rewardItemsHash: RecsType.String,
          hunger: RecsType.Number,
          fun: RecsType.Number,
          originPhotoId: RecsType.BigInt,
          startTime: RecsType.Number,
          endTime: RecsType.Number,
          startWaitingDuration: RecsType.Number,
          foodId: RecsType.BigInt,
          backpackItemsHash: RecsType.String,
          randSeed: RecsType.BigInt,
          candidateCats: RecsType.BigIntArray,
          catIds: RecsType.BigIntArray,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    UserItems: (() => {
      const tableId = new TableId("", "UserItems");
      return defineComponent(
        world,
        {
          itemNum: RecsType.Number,
          itemStatus: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    ItemConfig: (() => {
      const tableId = new TableId("", "ItemConfig");
      return defineComponent(
        world,
        {
          maxItemQuantity: RecsType.Number,
          name: RecsType.String,
          uri: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    FoodConfig: (() => {
      const tableId = new TableId("", "FoodConfig");
      return defineComponent(
        world,
        {
          hunger: RecsType.Number,
          travelDropRate: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    TaskConfig: (() => {
      const tableId = new TableId("", "TaskConfig");
      return defineComponent(
        world,
        {
          level: RecsType.Number,
          dupPeriod: RecsType.Number,
          rewardExp: RecsType.Number,
          rewardCoins: RecsType.BigInt,
          rewardDiamonds: RecsType.BigInt,
          itemConsumed: RecsType.Boolean,
          itemIds: RecsType.BigIntArray,
          itemQuantities: RecsType.NumberArray,
          rewardItemIds: RecsType.BigIntArray,
          rewardItemQuantities: RecsType.NumberArray,
          uri: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    ChoresConfig: (() => {
      const tableId = new TableId("", "ChoresConfig");
      return defineComponent(
        world,
        {
          choreType: RecsType.Number,
          choreReward: RecsType.BigInt,
          choreRewardType: RecsType.Number,
          choreRewardItemsHash: RecsType.String,
          choreRewardItems: RecsType.BigIntArray,
          choreRewardItemsNum: RecsType.BigIntArray,
          choreName: RecsType.String,
          choreDescription: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Shop: (() => {
      const tableId = new TableId("", "Shop");
      return defineComponent(
        world,
        {
          itemCoinPrice: RecsType.BigInt,
          itemDiamondPrice: RecsType.BigInt,
          itemTokenPrice: RecsType.BigInt,
          itemUnlockLevel: RecsType.Number,
          itemDailyLimit: RecsType.Number,
          itemWeeklyLimit: RecsType.Number,
          itemMonthlyLimit: RecsType.Number,
          itemForeverLimit: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    EventTimes: (() => {
      const tableId = new TableId("", "EventTimes");
      return defineComponent(
        world,
        {
          times: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    GlobalAddressConfig: (() => {
      const tableId = new TableId("", "GlobalAddressCon");
      return defineComponent(
        world,
        {
          configValue: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
